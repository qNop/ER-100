/******************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd
** All rights reserved.
** For any questions to The Qt Company, please use contact form at http://qt.io
**
** This file is part of the Qt Virtual Keyboard module.
**
** Licensees holding valid commercial license for Qt may use this file in
** accordance with the Qt License Agreement provided with the Software
** or, alternatively, in accordance with the terms contained in a written
** agreement between you and The Qt Company.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.io
**
******************************************************************************/

/*!

\page build.html
\contentspage {Building Qt Virtual Keyboard} {Contents}

\title Building Qt Virtual Keyboard

\section1 Overview

This document describes how to build the Qt Virtual Keyboard plugin.

The project is split into the following subprojects:
\table
\row
    \li \e examples/quick/enterprise/virtualkeyboard/virtualkeyboard/virtualkeyboard.pro
    \li Qt Virtual Keyboard Demo application
\row
    \li \e src/virtualkeyboard/virtualkeyboard.pro
    \li Qt Virtual Keyboard plugin
\row
    \li \e src/virtualkeyboard/styles/styles.pro
    \li Qt Virtual Keyboard Style plugin that enables style decorations for the
        keyboard
\row
    \li \e src/virtualkeyboard/3rdparty/hunspell/hunspell.pro
    \li A project file for compiling the Hunspell library.
    \note This project is used if the Hunspell library is built from
          sources rather than depending on the system library. The project
          will be activated when the source code is extracted to this
          directory.
\row
    \li \e src/virtualkeyboard/3rdparty/pinyin/pinyin.pro
    \li A project file for compiling the PinyinIME library.
\endtable

The input methods are implemented either in C++ or QML.
Qt Virtual Keyboard provides implementations of \e PlainInputMethod,
\e MultitapInputMethod and \e HunspellInputMethod.
The \e MultitapInputMethod is implemented in QML while the others are implemented
in C++.

\section1 Build Instructions

The Qt Virtual Keyboard can be built for Linux Desktop/X11, Windows Desktop
or Boot2Qt targets.
The target is automatically detected by QMAKE and requires no special
configuration parameters.

Qt Creator is the preferred build environment for Qt Virtual Keyboard as you
can then leverage the shadow build functionality and rapidly switch between
build targets.

\section2 Configuration Options

\table
\header
    \li CONFIG
    \li Description
    \li Remarks
\row
    \li \e disable-desktop
    \li Disables Desktop integration
    \li By default, the desktop integration is enabled when the target environment
        is X11 or Windows desktop. With this option, the desktop integration can be
        disabled.
\row
    \li \e disable-xcb
    \li Disables X11 integration
    \li \note Deprecated since 1.3. Use \e disable-desktop instead.
\row
    \li \e disable-hunspell
    \li Disables Hunspell integration
    \li Hunspell integration is enabled if the Hunspell library is available on the
        system, or if it is built using the local project file. Integration can be
        disabled using this option.
\row
    \li \e retro-style
    \li Enables Retro style
    \li Changes the default keyboard style to the Retro style. Both styles are still
        included in the package, but this option allows you to change the built-in
        default style.
\row
    \li \e pinyin
    \li Enables the Pinyin input method for Simplified Chinese.
    \li This option activates the Pinyin input method for the Simplified Chinese
        language and disables all other default languages, except English.
\row
    \li \e hangul
    \li Enables the Hangul input method for Korean.
    \li This option activates the Hangul input method for the Korean
        language and disables all other default languages, except English.
\row
    \li \e openwnn
    \li Enables the OpenWnn input method for Japanese.
    \li This option activates the OpenWnn input method for the Japanese
        language and disables all other default languages, except English.
\row
    \li \e arrow-key-navigation
    \li Enables arrow key navigation for the keyboard
    \li Allows controlling the keyboard using the arrow and return keys.
\endtable

\section2 Building Documentation

\table
\row
    \li \e {make docs}
    \li Generates documentation
\endtable

\section2 Hunspell Integration

By default, \e HunspellInputMethod will not be available unless the Hunspell
library and development headers are found. For Linux/X11 targets, the Hunspell
library can be provided by installing the libhunspell-dev package.
Alternatively, the Hunspell sources can be extracted into the
\e src/virtualkeyboard/3rdparty/hunspell directory. If Hunspell sources are used,
then the dictionary files must also be copied into the
\e src/virtualkeyboard/3rdparty/hunspell/data directory. Furthermore, if Hunspell
sources are used, \e hunspell.pro will be used for all targets.

\section1 Deployment

\section2 Desktop Targets

Add a Deploy Step that executes the \e {make install} command, then deploy using
the \e {Deploy All} command.

\section2 Boot2Qt Targets

Remount target file system as read-write before deployment.

    \e {adb -s <deviceid> remount}

Deploy using the \e {Deploy All} command.

*/
